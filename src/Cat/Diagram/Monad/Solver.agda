module Cat.Diagram.Monad.Solver where

open import 1Lab.Prelude hiding (id; _‚àò_)
open import 1Lab.Reflection hiding (_++_)
open import 1Lab.Reflection.Solver

open import Cat.Base
open import Cat.Reflection
open import Cat.Diagram.Monad

import Cat.Functor.Reasoning as FR
import Cat.Reasoning as CR

open import Data.List hiding (_++_)

module NbE {o h} {ùíû : Precategory o h} (M : Monad ùíû) where
  open CR ùíû
  module M = FR (Monad.M M)
  open Monad M

  --------------------------------------------------------------------------------
  -- NOTE: Object Expressions
  -- We can‚Ä≤t index everything by 'Ob', as Agda will (rightfully) assume that M‚ÇÄ is not injective,
  -- which then inhibits on our ability to pattern match on things.
  -- Therefore, we introduce a reflected type of object expressions,
  -- which solves the injectivity issue.

  data ‚Ä∂Ob‚Ä∂ : Typeœâ where
    ‚Ä∂_‚Ä∂   : Ob ‚Üí ‚Ä∂Ob‚Ä∂
    ‚Ä∂M‚ÇÄ‚Ä∂ : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂

  ‚ü¶_‚üß‚Çí : ‚Ä∂Ob‚Ä∂ ‚Üí Ob
  ‚ü¶ ‚Ä∂ X ‚Ä∂ ‚üß‚Çí = X
  ‚ü¶ ‚Ä∂M‚ÇÄ‚Ä∂ X ‚üß‚Çí = M‚ÇÄ ‚ü¶ X ‚üß‚Çí

  private variable
    W X Y Z : ‚Ä∂Ob‚Ä∂

  data ‚Ä∂Hom‚Ä∂ : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂ ‚Üí Typeœâ where
    ‚Ä∂M‚ÇÅ‚Ä∂  : ‚Ä∂Hom‚Ä∂ X Y ‚Üí ‚Ä∂Hom‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ X) (‚Ä∂M‚ÇÄ‚Ä∂ Y)
    ‚Ä∂Œ∑‚Ä∂   : (X : ‚Ä∂Ob‚Ä∂) ‚Üí ‚Ä∂Hom‚Ä∂ X (‚Ä∂M‚ÇÄ‚Ä∂ X)
    ‚Ä∂Œº‚Ä∂   : (X : ‚Ä∂Ob‚Ä∂) ‚Üí ‚Ä∂Hom‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ X)) (‚Ä∂M‚ÇÄ‚Ä∂ X)
    _‚Ä∂‚àò‚Ä∂_ : ‚Ä∂Hom‚Ä∂ Y Z ‚Üí ‚Ä∂Hom‚Ä∂ X Y ‚Üí ‚Ä∂Hom‚Ä∂ X Z
    ‚Ä∂id‚Ä∂  : ‚Ä∂Hom‚Ä∂ X X
    ‚Üë    : ‚àÄ X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí ‚Üí ‚Ä∂Hom‚Ä∂ X Y

  ‚ü¶_‚üß‚Çï : ‚Ä∂Hom‚Ä∂ X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  ‚ü¶ ‚Ä∂M‚ÇÅ‚Ä∂ f ‚üß‚Çï = M‚ÇÅ ‚ü¶ f ‚üß‚Çï
  ‚ü¶ ‚Ä∂Œ∑‚Ä∂ X ‚üß‚Çï = unit.Œ∑ ‚ü¶ X ‚üß‚Çí
  ‚ü¶ ‚Ä∂Œº‚Ä∂ X ‚üß‚Çï = mult.Œ∑ ‚ü¶ X ‚üß‚Çí
  ‚ü¶ e1 ‚Ä∂‚àò‚Ä∂ e2 ‚üß‚Çï = ‚ü¶ e1 ‚üß‚Çï ‚àò ‚ü¶ e2 ‚üß‚Çï
  ‚ü¶ ‚Ä∂id‚Ä∂ ‚üß‚Çï = id
  ‚ü¶ ‚Üë x y f ‚üß‚Çï = f

  --------------------------------------------------------------------------------
  -- Values

  data Frame : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂ ‚Üí Typeœâ where
    khom  : ‚àÄ {X Y} ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí ‚Üí Frame X Y
    kmap  : Frame X Y ‚Üí Frame (‚Ä∂M‚ÇÄ‚Ä∂ X) (‚Ä∂M‚ÇÄ‚Ä∂ Y)
    kunit : (X : ‚Ä∂Ob‚Ä∂) ‚Üí Frame X (‚Ä∂M‚ÇÄ‚Ä∂ X)
    kmult : (X : ‚Ä∂Ob‚Ä∂) ‚Üí Frame (‚Ä∂M‚ÇÄ‚Ä∂ (‚Ä∂M‚ÇÄ‚Ä∂ X)) (‚Ä∂M‚ÇÄ‚Ä∂ X)

  data Value : ‚Ä∂Ob‚Ä∂ ‚Üí ‚Ä∂Ob‚Ä∂ ‚Üí Typeœâ where
    [] : Value X X
    _‚à∑_ : Frame Y Z ‚Üí Value X Y ‚Üí Value X Z

  infixr 20 _‚à∑_

  ‚ü¶_‚üß‚Çñ : Frame X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  ‚ü¶ khom f ‚üß‚Çñ = f
  ‚ü¶ kmap k ‚üß‚Çñ = M‚ÇÅ ‚ü¶ k ‚üß‚Çñ
  ‚ü¶ kunit X ‚üß‚Çñ = unit.Œ∑ ‚ü¶ X ‚üß‚Çí
  ‚ü¶ kmult X ‚üß‚Çñ = mult.Œ∑ ‚ü¶ X ‚üß‚Çí

  ‚ü¶_‚üß·µ• : Value X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  ‚ü¶ [] ‚üß·µ• = id
  ‚ü¶ k ‚à∑ v ‚üß·µ• = ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•

  --------------------------------------------------------------------------------
  -- Evaluation
  --
  -- The evaluation strategy here is a bit subtle. The naive option
  -- is to push the 'kunit' frames all the way to the bottom of the stack,
  -- but this makes enacting the 'Œº ‚àò Œ∑' equations inneficient, as that
  -- means we will also have to push the 'kmult' frames all the way to the bottom
  -- as well.
  --
  -- Instead, what we do is push the 'kmap' frames past all of the 'kunit' and 'kmult'
  -- frames, which ensures that all of the 'kunit' and 'kmult' frames remain on the top
  -- of the stack. This makes it easier to enact the equations in question, as
  -- we don't have to dig nearly as far.

  -- Concatenate 2 values together, performing no simplification.
  _++_ : Value Y Z ‚Üí Value X Y ‚Üí Value X Z
  [] ++ v2 = v2
  (k ‚à∑ v1) ++ v2 = k ‚à∑ (v1 ++ v2)

  -- Apply M‚ÇÅ to a value.
  do-vmap : Value X Y ‚Üí Value (‚Ä∂M‚ÇÄ‚Ä∂ X) (‚Ä∂M‚ÇÄ‚Ä∂ Y)
  do-vmap [] = []
  do-vmap (f ‚à∑ v) = kmap f ‚à∑ do-vmap v

  enact-laws : Frame Y Z ‚Üí Frame X Y ‚Üí Value W X ‚Üí Value W Z
  push-frm : Frame Y Z ‚Üí Value X Y ‚Üí Value X Z

  -- The meat of the solver! This is responsible for enacting the
  -- monad equations (hence the name).
  -- There are 2 important phases to this function: 'kunit' and 'kmult'
  -- floating, and the subsequent elimination of those frames.
  --
  -- When we push a 'kmap' frame, we check to see if the head of the stack
  -- is a 'kunit' or 'kmult'; if so, we float those outwards so that they
  -- always remain at the top of the stack.
  --
  -- Subsequently, when pushing a 'kmult' frame, we need to enact
  -- equations. As the relevant frames are /always/ on the top of the stack,
  -- we can simply apply the relevant equations, and potentially keep pushing
  -- frames down.
  enact-laws (khom f) k' v = khom f ‚à∑ k' ‚à∑ v
  enact-laws (kmap k) (khom f) v = kmap k ‚à∑ khom f ‚à∑ v
  enact-laws (kmap k) (kmap k') v = do-vmap (enact-laws k k' []) ++ v      -- Functoriality
  enact-laws (kmap k) (kunit _) v = kunit _ ‚à∑ push-frm k v                 -- Naturality
  enact-laws (kmap k) (kmult _) v = kmult _ ‚à∑ push-frm (kmap (kmap k)) v   -- Naturality
  enact-laws (kunit _) k' v = kunit _ ‚à∑ k' ‚à∑ v
  enact-laws (kmult _) (khom f) v = kmult _ ‚à∑ khom f ‚à∑ v
  enact-laws (kmult _) (kmap (khom f)) v = kmult _ ‚à∑ kmap (khom f) ‚à∑ v
  enact-laws (kmult _) (kmap (kmap k')) v = kmult _ ‚à∑ kmap (kmap k') ‚à∑ v
  enact-laws (kmult _) (kmap (kunit _)) v = v                              -- Left Identity
  enact-laws (kmult _) (kmap (kmult _)) v = kmult _ ‚à∑ push-frm (kmult _) v -- Associativity
  enact-laws (kmult _) (kunit _) v = v                                     -- Right Identity
  enact-laws (kmult _) (kmult _) v = kmult _ ‚à∑ kmult _ ‚à∑ v

  -- Small shim, used to enact a law against a potentially empty stack.
  push-frm k [] = k ‚à∑ []
  push-frm k (k' ‚à∑ v) = enact-laws k k' v

  -- Concatenate 2 stacks together, performing simplification via 'enact-laws'.
  do-vcomp : Value Y Z ‚Üí Value X Y ‚Üí Value X Z
  do-vcomp [] v2 = v2
  do-vcomp (k ‚à∑ v1) v2 = push-frm k (do-vcomp v1 v2)

  eval : ‚Ä∂Hom‚Ä∂ X Y ‚Üí Value X Y
  eval (‚Ä∂M‚ÇÅ‚Ä∂ e) = do-vmap (eval e)
  eval (‚Ä∂Œ∑‚Ä∂ X) = kunit X ‚à∑ []
  eval (‚Ä∂Œº‚Ä∂ X) = kmult X ‚à∑ []
  eval (e1 ‚Ä∂‚àò‚Ä∂ e2) = do-vcomp (eval e1) (eval e2)
  eval ‚Ä∂id‚Ä∂ = []
  eval (‚Üë x y f) = khom f ‚à∑ []

  --------------------------------------------------------------------------------
  -- Soundness

  vmap-sound : ‚àÄ (v : Value X Y) ‚Üí ‚ü¶ do-vmap v ‚üß·µ• ‚â° M‚ÇÅ ‚ü¶ v ‚üß·µ•
  vmap-sound [] = sym M-id
  vmap-sound (k ‚à∑ v) =
    M‚ÇÅ ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ do-vmap v ‚üß·µ• ‚â°‚ü® refl‚ü©‚àò‚ü® vmap-sound v ‚ü©
    M‚ÇÅ ‚ü¶ k ‚üß‚Çñ M.ùíü.‚àò M‚ÇÅ ‚ü¶ v ‚üß·µ•  ‚â°Àò‚ü® M-‚àò ‚ü¶ k ‚üß‚Çñ ‚ü¶ v ‚üß·µ• ‚ü©
    M‚ÇÅ (‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•) ‚àé

  vconcat-sound : ‚àÄ (v1 : Value Y Z) ‚Üí (v2 : Value X Y) ‚Üí ‚ü¶ v1 ++ v2 ‚üß·µ• ‚â° ‚ü¶ v1 ‚üß·µ• ‚àò ‚ü¶ v2 ‚üß·µ•
  vconcat-sound [] v2 = sym (idl ‚ü¶ v2 ‚üß·µ•)
  vconcat-sound (k ‚à∑ v1) v2 = pushr (vconcat-sound v1 v2)

  enact-laws-sound : ‚àÄ (k1 : Frame Y Z) ‚Üí (k2 : Frame X Y) ‚Üí (v : Value W X) ‚Üí ‚ü¶ enact-laws k1 k2 v ‚üß·µ• ‚â° ‚ü¶ k1 ‚üß‚Çñ ‚àò ‚ü¶ k2 ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•
  push-frm-sound   : ‚àÄ (k : Frame Y Z) ‚Üí (v : Value X Y) ‚Üí ‚ü¶ push-frm k v ‚üß·µ• ‚â° ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•

  enact-laws-sound (khom f) k' v = refl
  enact-laws-sound (kmap k1) (khom f) v = refl
  enact-laws-sound (kmap k1) (kmap k2) v =
    ‚ü¶ do-vmap (enact-laws k1 k2 []) ++ v ‚üß·µ•     ‚â°‚ü® vconcat-sound (do-vmap (enact-laws k1 k2 [])) v ‚ü©
    ‚ü¶ do-vmap (enact-laws k1 k2 []) ‚üß·µ• ‚àò ‚ü¶ v ‚üß·µ• ‚â°‚ü® vmap-sound (enact-laws k1 k2 []) ‚ü©‚àò‚ü®refl ‚ü©
    M‚ÇÅ ‚ü¶ enact-laws k1 k2 [] ‚üß·µ• M.ùíü.‚àò ‚ü¶ v ‚üß·µ•    ‚â°‚ü® M.pushl (enact-laws-sound k1 k2 []) ‚ü©
    M‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò M‚ÇÅ (‚ü¶ k2 ‚üß‚Çñ ‚àò id) ‚àò ‚ü¶ v ‚üß·µ•     ‚â°‚ü® refl‚ü©‚àò‚ü® (M.‚ü® idr ‚ü¶ k2 ‚üß‚Çñ ‚ü© ‚ü©‚àò‚ü®refl) ‚ü©
    M‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò M‚ÇÅ ‚ü¶ k2 ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•            ‚àé
  enact-laws-sound (kmap k1) (kunit _) v =
    unit.Œ∑ _ ‚àò ‚ü¶ push-frm k1 v ‚üß·µ•    ‚â°‚ü® refl‚ü©‚àò‚ü® push-frm-sound k1 v ‚ü©
    unit.Œ∑ _ ‚àò ‚ü¶ k1 ‚üß‚Çñ ‚àò ‚ü¶ v ‚üß·µ•      ‚â°‚ü® extendl (unit.is-natural _ _ ‚ü¶ k1 ‚üß‚Çñ) ‚ü©
    M.F‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò unit.Œ∑ _ ‚àò ‚ü¶ v ‚üß·µ• ‚àé
  enact-laws-sound (kmap k1) (kmult _) v =
    mult.Œ∑ _ ‚àò ‚ü¶ push-frm (kmap (kmap k1)) v ‚üß·µ• ‚â°‚ü® refl‚ü©‚àò‚ü® push-frm-sound (kmap (kmap k1)) v ‚ü©
    mult.Œ∑ _ ‚àò M‚ÇÅ (M‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ) ‚àò ‚ü¶ v ‚üß·µ•         ‚â°‚ü® extendl (mult.is-natural _ _ ‚ü¶ k1 ‚üß‚Çñ) ‚ü©
    M.F‚ÇÅ ‚ü¶ k1 ‚üß‚Çñ ‚àò mult.Œ∑ _ ‚àò ‚ü¶ v ‚üß·µ•            ‚àé
  enact-laws-sound (kunit _) k2 v = refl
  enact-laws-sound (kmult _) (khom f) v = refl
  enact-laws-sound (kmult _) (kmap (khom f)) v = refl
  enact-laws-sound (kmult _) (kmap (kmap k2)) v = refl
  enact-laws-sound (kmult _) (kmap (kunit _)) v = insertl left-ident
  enact-laws-sound (kmult _) (kmap (kmult _)) v =
    mult.Œ∑ _ ‚àò ‚ü¶ push-frm (kmult _) v ‚üß·µ• ‚â°‚ü® refl‚ü©‚àò‚ü® push-frm-sound (kmult _) v ‚ü©
    mult.Œ∑ _ ‚àò mult.Œ∑ (M‚ÇÄ _) ‚àò ‚ü¶ v ‚üß·µ•    ‚â°‚ü® extendl (sym mult-assoc) ‚ü©
    mult.Œ∑ _ ‚àò M‚ÇÅ (mult.Œ∑ _) ‚àò ‚ü¶ v ‚üß·µ•    ‚àé
  enact-laws-sound (kmult _) (kunit _) v = insertl right-ident
  enact-laws-sound (kmult _) (kmult _) v = refl

  push-frm-sound k [] = refl
  push-frm-sound k (k' ‚à∑ v) = enact-laws-sound k k' v

  vcomp-sound : ‚àÄ (v1 : Value Y Z) ‚Üí (v2 : Value X Y) ‚Üí ‚ü¶ do-vcomp v1 v2 ‚üß·µ• ‚â° ‚ü¶ v1 ‚üß·µ• ‚àò ‚ü¶ v2 ‚üß·µ•
  vcomp-sound [] v2 = sym (idl ‚ü¶ v2 ‚üß·µ•)
  vcomp-sound (k ‚à∑ v1) v2 =
    ‚ü¶ push-frm k (do-vcomp v1 v2) ‚üß·µ• ‚â°‚ü® push-frm-sound k (do-vcomp v1 v2) ‚ü©
    ‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ do-vcomp v1 v2 ‚üß·µ• ‚â°‚ü® pushr (vcomp-sound v1 v2) ‚ü©
    (‚ü¶ k ‚üß‚Çñ ‚àò ‚ü¶ v1 ‚üß·µ•) ‚àò ‚ü¶ v2 ‚üß·µ• ‚àé

  eval-sound : ‚àÄ (e : ‚Ä∂Hom‚Ä∂ X Y) ‚Üí ‚ü¶ eval e ‚üß·µ• ‚â° ‚ü¶ e ‚üß‚Çï
  eval-sound (‚Ä∂M‚ÇÅ‚Ä∂ e) =
    ‚ü¶ do-vmap (eval e) ‚üß·µ• ‚â°‚ü® vmap-sound (eval e) ‚ü©
    M‚ÇÅ ‚ü¶ eval e ‚üß·µ•        ‚â°‚ü® M.‚ü® eval-sound e ‚ü© ‚ü©
    M‚ÇÅ ‚ü¶ e ‚üß‚Çï ‚àé
  eval-sound (‚Ä∂Œ∑‚Ä∂ X) = idr (unit.Œ∑ ‚ü¶ X ‚üß‚Çí)
  eval-sound (‚Ä∂Œº‚Ä∂ X) = idr (mult.Œ∑ ‚ü¶ X ‚üß‚Çí)
  eval-sound (e1 ‚Ä∂‚àò‚Ä∂ e2) =
    ‚ü¶ do-vcomp (eval e1) (eval e2) ‚üß·µ• ‚â°‚ü® vcomp-sound (eval e1) (eval e2) ‚ü©
    ‚ü¶ eval e1 ‚üß·µ• ‚àò ‚ü¶ eval e2 ‚üß·µ•       ‚â°‚ü® ap‚ÇÇ _‚àò_ (eval-sound e1) (eval-sound e2) ‚ü©
    ‚ü¶ e1 ‚üß‚Çï ‚àò ‚ü¶ e2 ‚üß‚Çï                 ‚àé
  eval-sound ‚Ä∂id‚Ä∂ = refl
  eval-sound (‚Üë x y f) = idr f

  abstract
    solve : ‚àÄ (e1 e2 : ‚Ä∂Hom‚Ä∂ X Y) ‚Üí ‚ü¶ eval e1 ‚üß·µ• ‚â° ‚ü¶ eval e2 ‚üß·µ• ‚Üí ‚ü¶ e1 ‚üß‚Çï ‚â° ‚ü¶ e2 ‚üß‚Çï
    solve e1 e2 p = sym (eval-sound e1) ¬∑¬∑ p ¬∑¬∑ (eval-sound e2)

  nf : ‚Ä∂Hom‚Ä∂ X Y ‚Üí Hom ‚ü¶ X ‚üß‚Çí ‚ü¶ Y ‚üß‚Çí
  nf e = ‚ü¶ eval e ‚üß·µ•

module Reflection where

  monad-args : Term ‚Üí List (Arg Term) ‚Üí List (Arg Term)
  monad-args monad xs = infer-hidden 3 $ monad v‚à∑ xs

  ‚ÄúM‚Äù : Term ‚Üí Term
  ‚ÄúM‚Äù monad = def (quote Monad.M) (monad-args monad [])

  ‚Äúunit‚Äù : Term ‚Üí Term
  ‚Äúunit‚Äù monad = def (quote Monad.unit) (monad-args monad [])

  ‚Äúmult‚Äù : Term ‚Üí Term
  ‚Äúmult‚Äù monad = def (quote Monad.mult) (monad-args monad [])

  record Monad-terms : Type where
    field
      cat : Term
      monad : Term

    functor-tms : Functor-terms
    functor-tms = record
      { c-cat = cat
      ; d-cat = cat
      ; functor = ‚ÄúM‚Äù monad
      }

    unit-tms : Nat-trans-terms
    unit-tms = record
      { c-cat = cat
      ; d-cat = cat
      ; F-functor = ‚ÄúId‚Äù cat
      ; G-functor = ‚ÄúM‚Äù monad
      ; nat-trans = ‚Äúunit‚Äù monad
      }

    mult-tms : Nat-trans-terms
    mult-tms = record
      { c-cat = cat
      ; d-cat = cat
      ; F-functor = (‚ÄúM‚Äù monad) ‚ÄúF‚àò‚Äù (‚ÄúM‚Äù monad)
      ; G-functor = ‚ÄúM‚Äù monad
      ; nat-trans = ‚Äúmult‚Äù monad
      }

  open Monad-terms

  quote-monad-terms : ‚àÄ {o ‚Ñì} {C : Precategory o ‚Ñì} ‚Üí Monad C ‚Üí TC Monad-terms
  quote-monad-terms {C = C} M = do
    cat ‚Üê quoteTC C
    monad ‚Üê quoteTC M
    pure (record { cat = cat ; monad = monad })

  match-M‚ÇÄ : Monad-terms ‚Üí Term ‚Üí TC Term
  match-M‚ÇÄ m tm = match-F‚ÇÄ (functor-tms m) tm

  match-M‚ÇÅ : Monad-terms ‚Üí Term ‚Üí TC Term
  match-M‚ÇÅ m tm = match-F‚ÇÅ (functor-tms m) tm

  match-unit : Monad-terms ‚Üí Term ‚Üí TC Term
  match-unit m tm = match-Œ∑ (unit-tms m) tm

  match-mult : Monad-terms ‚Üí Term ‚Üí TC Term
  match-mult m tm = match-Œ∑ (mult-tms m) tm

  invoke-solver : Monad-terms ‚Üí Term ‚Üí Term ‚Üí Term
  invoke-solver m lhs rhs =
    def (quote NbE.solve) (monad-args (m .monad) $ infer-hidden 2 $ lhs v‚à∑ rhs v‚à∑ ‚Äúrefl‚Äù v‚à∑ [])

  invoke-normaliser : Monad-terms ‚Üí Term ‚Üí Term
  invoke-normaliser m e =
    def (quote NbE.nf) (monad-args (m .monad) $ infer-hidden 2 $ e v‚à∑ [])

  {-# TERMINATING #-}
  build-object-expr : Monad-terms ‚Üí Term ‚Üí TC Term
  build-object-expr m tm =
    (do
       x ‚Üê match-M‚ÇÄ m tm
       x ‚Üê build-object-expr m x
       pure $ con (quote NbE.‚Ä∂M‚ÇÄ‚Ä∂) (x v‚à∑ []))
    <|>
    (pure $ con (quote NbE.‚Ä∂_‚Ä∂) (tm v‚à∑ []))

  build-neu-hom-expr : Monad-terms ‚Üí Term ‚Üí TC Term
  build-neu-hom-expr m f = do
    x , y ‚Üê get-hom-objects (m .cat) =<< inferType f
    debugPrint "tactic" 50
      [ "Building neutral hom expression: " , termErr f
      , "\n  Has type: Hom (" , termErr x , ") (" , termErr y , ")"
      ]
    x ‚Üê build-object-expr m =<< normalise x
    y ‚Üê build-object-expr m =<< normalise y
    returnTC $ con (quote NbE.‚Üë) (x v‚à∑ y v‚à∑ f v‚à∑ [])

  {-# TERMINATING #-}
  build-hom-expr : Monad-terms ‚Üí Term ‚Üí TC Term
  build-hom-expr m tm =
    (do
       match-id (m .cat) tm
       pure (con (quote NbE.‚Ä∂id‚Ä∂) []))
    <|>
    (do
       f , g ‚Üê match-‚àò (m .cat) tm
       f ‚Üê build-hom-expr m f
       g ‚Üê build-hom-expr m g
       pure (con (quote NbE._‚Ä∂‚àò‚Ä∂_) (f v‚à∑ g v‚à∑ [])))
    <|>
    (do
       f ‚Üê match-M‚ÇÅ m tm
       f ‚Üê build-hom-expr m f
       pure (con (quote NbE.‚Ä∂M‚ÇÅ‚Ä∂) (f v‚à∑ [])))
    <|>
    (do
       x ‚Üê match-unit m tm
       x ‚Üê build-object-expr m x
       pure (con (quote NbE.‚Ä∂Œ∑‚Ä∂) (x v‚à∑ [])))
    <|>
    (do
       x ‚Üê match-mult m tm
       x ‚Üê build-object-expr m x
       pure (con (quote NbE.‚Ä∂Œº‚Ä∂) (x v‚à∑ [])))
    <|>
    (build-neu-hom-expr m tm)

  monad-solver : ‚àÄ {o h} {C : Precategory o h} ‚Üí Monad C ‚Üí TC Simple-solver
  monad-solver M = do
    monad ‚Üê quote-monad-terms M
    pure (simple-solver [] (build-hom-expr monad) (invoke-solver monad) (invoke-normaliser monad))

macro
  monad! : ‚àÄ {o h} {C : Precategory o h} ‚Üí Monad C ‚Üí Term ‚Üí TC ‚ä§
  monad! M = mk-simple-solver (Reflection.monad-solver M)

  simpl-monad! : ‚àÄ {o h} {C : Precategory o h} ‚Üí Monad C ‚Üí Term ‚Üí Term ‚Üí TC ‚ä§
  simpl-monad! M = mk-simple-normalise (Reflection.monad-solver M)

  repr-monad! : ‚àÄ {o h} {C : Precategory o h} ‚Üí Monad C ‚Üí Term ‚Üí Term ‚Üí TC ‚ä§
  repr-monad! M = mk-simple-repr (Reflection.monad-solver M)

private module Test {o h} {ùíû : Precategory o h} (monad : Monad ùíû) where
  open Precategory ùíû
  open Monad monad

  variable
    A B C : Ob

  test : ‚àÄ {f : Hom B C} {g : Hom A B}
         ‚Üí mult.Œ∑ C ‚àò M‚ÇÅ (M‚ÇÅ (f ‚àò g)) ‚àò unit.Œ∑ (M‚ÇÄ A) ‚â° M‚ÇÅ f ‚àò M‚ÇÅ (id ‚àò g)
  test = monad! monad

  test-assoc : ‚àÄ X ‚Üí mult.Œ∑ X ‚àò M‚ÇÅ (mult.Œ∑ X) ‚â° mult.Œ∑ X ‚àò mult.Œ∑ (M‚ÇÄ X)
  test-assoc X = monad! monad

  test-nested : ‚àÄ X ‚Üí M‚ÇÅ (mult.Œ∑ X ‚àò unit.Œ∑ (M‚ÇÄ X)) ‚â° id
  test-nested _ = monad! monad

  test-separate : ‚àÄ X ‚Üí M‚ÇÅ (mult.Œ∑ X) ‚àò M‚ÇÅ (unit.Œ∑ (M‚ÇÄ X)) ‚â° id
  test-separate _ = monad! monad

  test-type : ‚àÄ {x y} ‚Üí (f : Hom x (M‚ÇÄ y)) ‚Üí mult.Œ∑ y ‚àò M‚ÇÅ f ‚àò unit.Œ∑ x ‚â° f
  test-type _ = monad! monad
